CMAKE_MINIMUM_REQUIRED(VERSION 2.2)
PROJECT(KWWidgets)

# --------------------------------------------------------------------------
# To use this library in a larger project you will need to SUBDIR into this
# directory so that it gets built and then you will use the following variables
# in your CMakeLists files to get the proper include paths and libraries

SET(KWWidgets_INCLUDE_PATH 
  "${CMAKE_CURRENT_SOURCE_DIR};${CMAKE_CURRENT_BINARY_DIR}/AutoGeneratedClasses;${CMAKE_CURRENT_BINARY_DIR}"
  CACHE INTERNAL "include paths for KWWidgets"
  )

SET(KWWidgets_LIBRARIES KWWidgets CACHE INTERNAL "libraries for KWWidgets")

# You will also need to define a value for the following variables:
# KWWidgets_INSTALL_BIN_DIR          - binary dir (executables)
# KWWidgets_INSTALL_LIB_DIR          - library dir (libs)
# KWWidgets_INSTALL_DATA_DIR         - share dir (say, examples, data, etc)
# KWWidgets_INSTALL_INCLUDE_DIR      - include dir (headers)
# KWWidgets_INSTALL_PACKAGE_DIR      - package/export configuration files
# KWWidgets_VTK_INSTALL_PACKAGE_DIR  - VTK package/export configuration files
# KWWidgets_INSTALL_NO_DEVELOPMENT   - do not install development files
# KWWidgets_INSTALL_NO_RUNTIME       - do not install runtime files
# KWWidgets_INSTALL_NO_DOCUMENTATION - do not install documentation files
# --------------------------------------------------------------------------

# --------------------------------------------------------------------------
# Version

SET(KWWidgets_MAJOR_VERSION 1)
SET(KWWidgets_MINOR_VERSION 0)
SET(KWWidgets_PATCH_VERSION 0)
SET(KWWidgets_VERSION
  "${KWWidgets_MAJOR_VERSION}.${KWWidgets_MINOR_VERSION}.${KWWidgets_PATCH_VERSION}")

# --------------------------------------------------------------------------
# We need VTK

IF(NOT VTK_SOURCE_DIR)
  FIND_PACKAGE(VTK REQUIRED)
  INCLUDE(${VTK_USE_FILE})
  IF(NOT VTK_WRAP_TCL)
    MESSAGE(FATAL_ERROR "Please set VTK_WRAP_TCL to ON in VTK")
  ENDIF(NOT VTK_WRAP_TCL)
  IF(VTK_MAJOR_VERSION LESS 5)
    MESSAGE(FATAL_ERROR "Please use VTK 5.0 or later")
  ENDIF(VTK_MAJOR_VERSION LESS 5)
ELSE(NOT VTK_SOURCE_DIR)
  IF(NOT VTK_WRAP_TCL)
    INCLUDE_DIRECTORIES(${VTK_TK_RESOURCES_DIR})
  ENDIF(NOT VTK_WRAP_TCL)
ENDIF(NOT VTK_SOURCE_DIR)

# --------------------------------------------------------------------------
# Output directories

IF(NOT LIBRARY_OUTPUT_PATH)
  SET(LIBRARY_OUTPUT_PATH ${KWWidgets_BINARY_DIR}/bin CACHE INTERNAL
    "Single output directory for building all libraries.")
ENDIF(NOT LIBRARY_OUTPUT_PATH)
SET(KWWidgets_LIBRARY_DIRS ${LIBRARY_OUTPUT_PATH})
SET(KWWidgets_RUNTIME_DIRS ${LIBRARY_OUTPUT_PATH})

IF(NOT EXECUTABLE_OUTPUT_PATH)
  SET(EXECUTABLE_OUTPUT_PATH ${KWWidgets_BINARY_DIR}/bin CACHE INTERNAL
    "Single output directory for building all executables.")
ENDIF(NOT EXECUTABLE_OUTPUT_PATH)

# --------------------------------------------------------------------------
# Some flags

INCLUDE_REGULAR_EXPRESSION("^(vtk|kw|icons).*$")
SET(CMAKE_C_FLAGS "${CMAKE_ANSI_CFLAGS} ${CMAKE_C_FLAGS}")
IF(CMAKE_COMPILER_2005)
  ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE)
ENDIF(CMAKE_COMPILER_2005)

SET(BUILD_SHARED_LIBS ${VTK_BUILD_SHARED_LIBS})
SET(KWWidgets_BUILD_SHARED_LIBS ${BUILD_SHARED_LIBS})

SET(KWWidgets_CMAKE_DIR "${KWWidgets_SOURCE_DIR}/CMake" CACHE INTERNAL "")
SUBDIRS(CMake)
# Make sure VTK_CMAKE_DIR is at the beginning so that VTK's FindTCL is
# used before CMake's FindTCL.
SET(CMAKE_MODULE_PATH "${VTK_CMAKE_DIR}" ${CMAKE_MODULE_PATH} "${KWWidgets_CMAKE_DIR}")

SET(KWWidgets_CONFIGURATION_TYPES ${CMAKE_CONFIGURATION_TYPES})

MARK_AS_ADVANCED(CMAKE_BACKWARDS_COMPATIBILITY)

INCLUDE("${KWWidgets_SOURCE_DIR}/Utilities/tkdnd/TkDnD.cmake")
TkDnD_GET_LIBRARY(KWWidgets_USE_TKDND TKDND_SRCS TKDND_INCLUDE_PATH TKDND_LIBS)

INCLUDE("${KWWidgets_SOURCE_DIR}/Utilities/TkTreeCtrl/TkTreeCtrl.cmake")
TkTreeCtrl_GET_LIBRARY(KWWidgets_USE_TKTREECTRL TKTREECTRL_SRCS TKTREECTRL_INCLUDE_PATH TKTREECTRL_LIBS)

# --------------------------------------------------------------------------
# Install directories

IF(NOT KWWidgets_INSTALL_BIN_DIR)
  SET(KWWidgets_INSTALL_BIN_DIR "/bin")
ENDIF(NOT KWWidgets_INSTALL_BIN_DIR)

IF(NOT KWWidgets_INSTALL_LIB_DIR)
  SET(KWWidgets_INSTALL_LIB_DIR "/lib/${PROJECT_NAME}")
ENDIF(NOT KWWidgets_INSTALL_LIB_DIR)

IF(NOT KWWidgets_INSTALL_DATA_DIR)
  SET(KWWidgets_INSTALL_DATA_DIR "/share/${PROJECT_NAME}"
    CACHE INTERNAL "")
ENDIF(NOT KWWidgets_INSTALL_DATA_DIR)

IF(NOT KWWidgets_INSTALL_INCLUDE_DIR)
  SET(KWWidgets_INSTALL_INCLUDE_DIR "/include/${PROJECT_NAME}")
ENDIF(NOT KWWidgets_INSTALL_INCLUDE_DIR)

IF(NOT KWWidgets_INSTALL_PACKAGE_DIR)
  SET(KWWidgets_INSTALL_PACKAGE_DIR ${KWWidgets_INSTALL_LIB_DIR}
    CACHE INTERNAL "")
ENDIF(NOT KWWidgets_INSTALL_PACKAGE_DIR)

IF(NOT KWWidgets_VTK_INSTALL_PACKAGE_DIR)
  SET(KWWidgets_VTK_INSTALL_PACKAGE_DIR ${VTK_INSTALL_PACKAGE_DIR})
ENDIF(NOT KWWidgets_VTK_INSTALL_PACKAGE_DIR)

IF(NOT KWWidgets_INSTALL_NO_DEVELOPMENT)
  SET(KWWidgets_INSTALL_NO_DEVELOPMENT 0)
ENDIF(NOT KWWidgets_INSTALL_NO_DEVELOPMENT)

IF(NOT KWWidgets_INSTALL_NO_RUNTIME)
  SET(KWWidgets_INSTALL_NO_RUNTIME 0)
ENDIF(NOT KWWidgets_INSTALL_NO_RUNTIME)

IF(NOT KWWidgets_INSTALL_NO_DOCUMENTATION)
  SET(KWWidgets_INSTALL_NO_DOCUMENTATION 0)
ENDIF(NOT KWWidgets_INSTALL_NO_DOCUMENTATION)

SET(KWWidgets_INSTALL_NO_LIBRARIES)
IF(KWWidgets_BUILD_SHARED_LIBS)
  IF(KWWidgets_INSTALL_NO_RUNTIME AND KWWidgets_INSTALL_NO_DEVELOPMENT)
    SET(KWWidgets_INSTALL_NO_LIBRARIES 1)
  ENDIF(KWWidgets_INSTALL_NO_RUNTIME AND KWWidgets_INSTALL_NO_DEVELOPMENT)
ELSE(KWWidgets_BUILD_SHARED_LIBS)
  IF(KWWidgets_INSTALL_NO_DEVELOPMENT)
    SET(KWWidgets_INSTALL_NO_LIBRARIES 1)
  ENDIF(KWWidgets_INSTALL_NO_DEVELOPMENT)
ENDIF(KWWidgets_BUILD_SHARED_LIBS)

# --------------------------------------------------------------------------
# Sources

OPTION(KWWidgets_BUILD_VTK_WIDGETS "Build the widgets that can be interfaced to complex VTK classes. Set it to OFF to build a core version of the library." ON)
MARK_AS_ADVANCED(KWWidgets_BUILD_VTK_WIDGETS)

SET(KWWidgets_SRCS
  vtkKWApplication.cxx
  vtkKWApplicationSettingsInterface.cxx
  vtkKWBalloonHelpManager.cxx
  vtkKWCanvas.cxx
  vtkKWChangeColorButton.cxx
  vtkKWCheckButton.cxx
  vtkKWCheckButtonWithChangeColorButton.cxx
  vtkKWCheckButtonWithPopupFrame.cxx
  vtkKWClipboardHelper.cxx
  vtkKWColorPickerDialog.cxx
  vtkKWColorPickerWidget.cxx
  vtkKWColorPresetSelector.cxx
  vtkKWColorSpectrumWidget.cxx
  vtkKWComboBox.cxx
  vtkKWCompositeWidget.cxx
  vtkKWCoreWidget.cxx
  vtkKWDialog.cxx
  vtkKWDirectoryExplorer.cxx 
  vtkKWDragAndDropTargetSet.cxx
  vtkKWEntry.cxx
  vtkKWEvent.cxx
  vtkKWEventMap.cxx
  vtkKWExtent.cxx
  vtkKWFavoriteDirectoriesFrame.cxx 
  vtkKWFileBrowserDialog.cxx
  vtkKWFileBrowserWidget.cxx 
  vtkKWFileListTable.cxx 
  vtkKWFrame.cxx
  vtkKWFrameWithLabel.cxx
  vtkKWFrameWithScrollbar.cxx
  vtkKWHSVColorSelector.cxx
  vtkKWIcon.cxx
  vtkKWInternationalization.cxx
  vtkKWLabel.cxx
  vtkKWLanguage.cxx
  vtkKWListBox.cxx
  vtkKWListBoxToListBoxSelectionEditor.cxx
  vtkKWLoadSaveButton.cxx
  vtkKWLoadSaveDialog.cxx
  vtkKWLogDialog.cxx
  vtkKWLogWidget.cxx
  vtkKWMaterialPropertyWidget.cxx
  vtkKWMatrixWidget.cxx
  vtkKWMenu.cxx
  vtkKWMenuButton.cxx
  vtkKWMessage.cxx
  vtkKWMessageDialog.cxx
  vtkKWMostRecentFilesManager.cxx
  vtkKWMultiColumnList.cxx
  vtkKWNotebook.cxx
  vtkKWObject.cxx
  vtkKWOptionDataBase.cxx
  vtkKWOptions.cxx
  vtkKWPopupButton.cxx
  vtkKWPopupFrame.cxx
  vtkKWPresetSelector.cxx
  vtkKWProgressGauge.cxx
  vtkKWPushButton.cxx
  vtkKWPushButtonWithMenu.cxx
  vtkKWRadioButton.cxx
  vtkKWRadioButtonSet.cxx
  vtkKWRange.cxx
  vtkKWRegistryHelper.cxx
  vtkKWResourceUtilities.cxx
  vtkKWSaveImageDialog.cxx
  vtkKWScalarComponentSelectionWidget.cxx
  vtkKWScale.cxx
  vtkKWScaleWithEntry.cxx
  vtkKWScrollbar.cxx
  vtkKWSeparator.cxx
  vtkKWSimpleEntryDialog.cxx
  vtkKWSpinBox.cxx
  vtkKWSpinButtons.cxx
  vtkKWSplashScreen.cxx
  vtkKWSplitFrame.cxx
  vtkKWStateMachine.cxx
  vtkKWStateMachineCluster.cxx
  vtkKWStateMachineDOTWriter.cxx
  vtkKWStateMachineInput.cxx
  vtkKWStateMachineState.cxx
  vtkKWStateMachineTransition.cxx
  vtkKWStateMachineWriter.cxx
  vtkKWTclInteractor.cxx
  vtkKWText.cxx
  vtkKWTheme.cxx
  vtkKWThumbWheel.cxx
  vtkKWTkUtilities.cxx
  vtkKWTkcon.cxx
  vtkKWToolbar.cxx
  vtkKWToolbarSet.cxx
  vtkKWTopLevel.cxx
  vtkKWTree.cxx
  vtkKWUserInterfaceManager.cxx
  vtkKWUserInterfaceManagerDialog.cxx
  vtkKWUserInterfaceManagerNotebook.cxx
  vtkKWUserInterfacePanel.cxx
  vtkKWWidget.cxx
  vtkKWWidgetSet.cxx
  vtkKWWidgetWithLabel.cxx
  vtkKWWidgetWithScrollbars.cxx
  vtkKWWidgetWithSpinButtons.cxx
  vtkKWWidgetsVersion.cxx
  vtkKWWindow.cxx
  vtkKWWindowBase.cxx
  vtkKWWindowLevelPresetSelector.cxx
  vtkKWWizardDialog.cxx
  vtkKWWizardStep.cxx
  vtkKWWizardWidget.cxx
  vtkKWWizardWorkflow.cxx
)

IF(KWWidgets_BUILD_VTK_WIDGETS)
  IF(NOT VTK_USE_TK)
    MESSAGE(FATAL_ERROR "Please set VTK_USE_TK to ON in VTK for KWWidgets_BUILD_VTK_WIDGETS to be ON as well.")
  ENDIF(NOT VTK_USE_TK)
  SET(KWWidgets_SRCS ${KWWidgets_SRCS}
    vtkKWColorPresetMenu.cxx
    vtkKWColorTransferFunctionEditor.cxx
    vtkKWCornerAnnotationEditor.cxx
    vtkKWGenericRenderWindowInteractor.cxx
    vtkKWHeaderAnnotationEditor.cxx
    vtkKWHistogram.cxx
    vtkKWHistogramSet.cxx
    vtkKWParameterValueFunctionEditor.cxx
    vtkKWParameterValueFunctionInterface.cxx
    vtkKWParameterValueHermiteFunctionEditor.cxx
    vtkKWPiecewiseFunctionEditor.cxx
    vtkKWRenderWidget.cxx
    vtkKWScalarBarAnnotation.cxx
    vtkKWSelectionFrame.cxx
    vtkKWSelectionFrameLayoutManager.cxx
    vtkKWSimpleAnimationWidget.cxx
    vtkKWSurfaceMaterialPropertyWidget.cxx
    vtkKWTextPropertyEditor.cxx
    vtkKWVolumeMaterialPropertyWidget.cxx
    vtkKWVolumePropertyPresetSelector.cxx
    vtkKWVolumePropertyWidget.cxx
    )
ENDIF(KWWidgets_BUILD_VTK_WIDGETS)

# Utilities/Extra sources

SET(KWWidgets_UTILS_SRCS
  ${CMAKE_CURRENT_SOURCE_DIR}/Wrapping/Tcl/vtkKWWidgetsInitializeCommand.cxx
  ${CMAKE_CURRENT_SOURCE_DIR}/Utilities/BWidgets/vtkKWBWidgetsInit.cxx
  ${CMAKE_CURRENT_SOURCE_DIR}/Utilities/Tablelist/vtkKWTablelistInit.cxx
  ${CMAKE_CURRENT_SOURCE_DIR}/Utilities/tkcon/vtkKWTkconInit.cxx
  )
IF(TKDND_SRCS)
  SET(KWWidgets_UTILS_SRCS ${KWWidgets_UTILS_SRCS} ${TKDND_SRCS})
ENDIF(TKDND_SRCS)
IF(TKTREECTRL_SRCS)
  SET(KWWidgets_UTILS_SRCS ${KWWidgets_UTILS_SRCS} ${TKTREECTRL_SRCS})
ENDIF(TKTREECTRL_SRCS)

# Abstract/pure virtual classes

SET_SOURCE_FILES_PROPERTIES(
  vtkKWMaterialPropertyWidget.cxx
  vtkKWParameterValueFunctionEditor.cxx
  vtkKWParameterValueFunctionInterface.cxx
  vtkKWParameterValueHermiteFunctionEditor.cxx
  vtkKWStateMachineWriter.cxx
  vtkKWUserInterfaceManager.cxx
  vtkKWWidgetSet.cxx
  vtkKWWidgetWithScrollbars.cxx
  vtkKWClipboardHelper.cxx
  vtkKWRegistryHelper.cxx
  ${KWWidgets_UTILS_SRCS}
  ABSTRACT
  )

# Helper classes

SET_SOURCE_FILES_PROPERTIES(
  vtkKWEvent.cxx
  ${KWWidgets_UTILS_SRCS}
  WRAP_EXCLUDE
  )

IF(NOT VTK_WRAP_TCL)
  SET_SOURCE_FILES_PROPERTIES(
    vtkKWGenericRenderWindowInteractor.cxx
    WRAP_EXCLUDE
    )
ENDIF(NOT VTK_WRAP_TCL)

# Add the registry code, and the set_icon command on win32

IF(WIN32)
  SET(KWWidgets_UTILS_SRCS ${KWWidgets_UTILS_SRCS}
    ${CMAKE_CURRENT_SOURCE_DIR}/Utilities/ApplicationIcon/vtkKWSetApplicationIconTclCommand.c)
  SET(KWWidgets_SRCS ${KWWidgets_SRCS} 
    vtkKWWin32RegistryHelper.cxx)
  SET_SOURCE_FILES_PROPERTIES(
    ${CMAKE_CURRENT_SOURCE_DIR}/Utilities/ApplicationIcon/vtkKWSetApplicationIconTclCommand.c
    WRAP_EXCLUDE)
ELSE(WIN32)
  SET(KWWidgets_SRCS ${KWWidgets_SRCS}
    vtkKWUNIXRegistryHelper.cxx)
ENDIF(WIN32)

# --------------------------------------------------------------------------
# Sources generated automatically from templates

SET(KWWidgets_TEMPLATES_DIR ${KWWidgets_SOURCE_DIR}/Templates)
SET(KWWidgets_AUTOGENERATED_DIR ${KWWidgets_BINARY_DIR}/AutoGeneratedClasses)
SET(KWWidgets_AUTOGENERATED_SRCS)
SET(KWWidgets_TEMPLATE_SRCS)

SUBDIRS(Templates)

MACRO(KWWidgets_AUTOGENERATE_CLASS template build_dir class suffix src_list)
  SET(WidgetType ${class})
  CONFIGURE_FILE(
    ${template}.h.in
    ${build_dir}/${class}${suffix}.h
    IMMEDIATE)
  CONFIGURE_FILE(
    ${template}.cxx.in
    ${build_dir}/${class}${suffix}.cxx
    IMMEDIATE)
  SET(${src_list} ${${src_list}} ${build_dir}/${class}${suffix}.cxx)
ENDMACRO(KWWidgets_AUTOGENERATE_CLASS)

# The "set of widgets" are automatically generated from some core widgets
# (i.e., vtkKWCheckButton => vtkKWCheckButtonSet).

SET(list 
  vtkKWCheckButton
  vtkKWComboBox
  vtkKWEntry
  vtkKWFrame
  vtkKWLabel
  vtkKWLabelWithLabel
  vtkKWPushButton
  vtkKWScale
  vtkKWScaleWithEntry
  vtkKWScaleWithLabel
  vtkKWSpinBox
)
IF(KWWidgets_BUILD_VTK_WIDGETS)
  SET(list ${list}
    vtkKWColorTransferFunctionEditor
    vtkKWPiecewiseFunctionEditor
    )
ENDIF(KWWidgets_BUILD_VTK_WIDGETS)
FOREACH(WidgetType ${list})
  KWWidgets_AUTOGENERATE_CLASS(
    ${KWWidgets_TEMPLATES_DIR}/vtkKWWidgetSetSubclass
    ${KWWidgets_AUTOGENERATED_DIR}
    ${WidgetType}
    Set
    KWWidgets_AUTOGENERATED_SRCS)
ENDFOREACH(WidgetType)
SET(KWWidgets_TEMPLATE_SRCS ${KWWidgets_TEMPLATE_SRCS} 
  ${KWWidgets_TEMPLATES_DIR}/vtkKWWidgetSetSubclass.cxx.in)

# The "labeled widgets" are automatically generated from some core widgets
# (i.e., vtkKWCheckButton => vtkKWCheckButtonWithLabel)

SET(list 
  vtkKWCheckButton
  vtkKWCheckButtonSet
  vtkKWComboBox
  vtkKWEntry
  vtkKWLabel
  vtkKWLoadSaveButton
  vtkKWListBoxWithScrollbars
  vtkKWMatrixWidget
  vtkKWMenuButton
  vtkKWMenuButtonWithSpinButtons
  vtkKWMessage
  vtkKWMultiColumnList
  vtkKWMultiColumnListWithScrollbars
  vtkKWPopupButton
  vtkKWPushButton
  vtkKWPushButtonSet
  vtkKWRadioButtonSet
  vtkKWScale
  vtkKWScaleWithEntrySet
  vtkKWSpinBox
  vtkKWText
  vtkKWTextWithScrollbars
  )
FOREACH(WidgetType ${list})
  KWWidgets_AUTOGENERATE_CLASS(
    ${KWWidgets_TEMPLATES_DIR}/vtkKWWidgetWithLabelSubclass
    ${KWWidgets_AUTOGENERATED_DIR}
    ${WidgetType}
    WithLabel
    KWWidgets_AUTOGENERATED_SRCS)
ENDFOREACH(WidgetType)
SET(KWWidgets_TEMPLATE_SRCS ${KWWidgets_TEMPLATE_SRCS} 
  ${KWWidgets_TEMPLATES_DIR}/vtkKWWidgetWithLabelSubclass.cxx.in)

# The "widgets with scrollbars" are automatically generated from some core
# widgets
# (i.e., vtkKWText => vtkKWTextWithScrollbars)

SET(list 
  vtkKWCanvas
  vtkKWListBox
  vtkKWMultiColumnList
  vtkKWText
  vtkKWTree
  )
FOREACH(WidgetType ${list})
  KWWidgets_AUTOGENERATE_CLASS(
    ${KWWidgets_TEMPLATES_DIR}/vtkKWWidgetWithScrollbarsSubclass
    ${KWWidgets_AUTOGENERATED_DIR}
    ${WidgetType}
    WithScrollbars
    KWWidgets_AUTOGENERATED_SRCS)
ENDFOREACH(WidgetType)
SET(KWWidgets_TEMPLATE_SRCS ${KWWidgets_TEMPLATE_SRCS} 
  ${KWWidgets_TEMPLATES_DIR}/vtkKWWidgetWithScrollbarsSubclass.cxx.in)

# The "widgets with spinbuttons" are automatically generated from some
# core widgets
# (i.e., vtkKWMenuButton => vtkKWMenuButtonWithSpinButtons)

SET(list 
  vtkKWMenuButton
  )
FOREACH(WidgetType ${list})
  KWWidgets_AUTOGENERATE_CLASS(
    ${KWWidgets_TEMPLATES_DIR}/vtkKWWidgetWithSpinButtonsSubclass
    ${KWWidgets_AUTOGENERATED_DIR}
    ${WidgetType}
    WithSpinButtons
    KWWidgets_AUTOGENERATED_SRCS)
ENDFOREACH(WidgetType)
SET(KWWidgets_TEMPLATE_SRCS ${KWWidgets_TEMPLATE_SRCS} 
  ${KWWidgets_TEMPLATES_DIR}/vtkKWWidgetWithSpinButtonsSubclass.cxx.in)

# --------------------------------------------------------------------------
# SOViewer support

OPTION(KWWidgets_USE_SOVIEWER "Use the SOViewer library (SOV_DIR) and build the corresponding support classes and examples." OFF)
MARK_AS_ADVANCED(KWWidgets_USE_SOVIEWER)
IF(KWWidgets_USE_SOVIEWER)
  FIND_PACKAGE(SOV REQUIRED)
  IF(SOV_FOUND)
    MARK_AS_ADVANCED(FLTK_FLUID_EXECUTABLE SOV_DIR)
  ENDIF(SOV_FOUND)
ENDIF(KWWidgets_USE_SOVIEWER)

# --------------------------------------------------------------------------
# HTML Help can help
# http://msdn.microsoft.com/
# http://msdn.microsoft.com/library/default.asp?url=/library/en-us/htmlhelp/html/vsconwhtshw.asp

IF(WIN32)
  IF(HTML_HELP_INCLUDE_PATH AND HTML_HELP_LIBRARY)
  ELSE(HTML_HELP_INCLUDE_PATH AND HTML_HELP_LIBRARY)
    INCLUDE(FindHTMLHelp)
  ENDIF(HTML_HELP_INCLUDE_PATH AND HTML_HELP_LIBRARY)
  IF(HTML_HELP_INCLUDE_PATH AND HTML_HELP_LIBRARY)
    SET(KWWidgets_USE_HTML_HELP 1)
  ELSE(HTML_HELP_INCLUDE_PATH AND HTML_HELP_LIBRARY)
    SET(KWWidgets_USE_HTML_HELP 0)
  ENDIF(HTML_HELP_INCLUDE_PATH AND HTML_HELP_LIBRARY)
  IF(KWWidgets_USE_HTML_HELP)
    SET(KWWidgets_INCLUDE_PATH ${KWWidgets_INCLUDE_PATH} 
      ${HTML_HELP_INCLUDE_PATH} CACHE INTERNAL "" FORCE)
  ENDIF(KWWidgets_USE_HTML_HELP)
ENDIF(WIN32)

# --------------------------------------------------------------------------
# Internationalization

SET(default_val 0)
IF(DEFINED KWWidgets_USE_INTERNATIONALIZATION_DEFAULT)
  SET(default_val ${KWWidgets_USE_INTERNATIONALIZATION_DEFAULT})
ENDIF(DEFINED KWWidgets_USE_INTERNATIONALIZATION_DEFAULT)
OPTION(KWWidgets_USE_INTERNATIONALIZATION 
  "Enable internationalization support in KWWidgets." ${default_val})
MARK_AS_ADVANCED(KWWidgets_USE_INTERNATIONALIZATION)
IF(KWWidgets_USE_INTERNATIONALIZATION)
  FIND_PACKAGE(Gettext)
  IF(GETTEXT_FOUND)
    INCLUDE("${KWWidgets_CMAKE_DIR}/KWWidgetsInternationalizationMacros.cmake")
    SET(KWWidgets_INCLUDE_PATH ${KWWidgets_INCLUDE_PATH}
      ${GETTEXT_INCLUDE_DIR} CACHE INTERNAL "" FORCE)
    KWWidgets_CREATE_GETTEXT_TARGETS(
      DOMAIN_NAME "KWWidgets"
      LOCALE_LIST "fr"
      COPYRIGHT_HOLDER "Kitware, Inc."
      SOURCES "${KWWidgets_SRCS};${KWWidgets_TEMPLATE_SRCS}"
      PO_DIR "${CMAKE_CURRENT_SOURCE_DIR}/Resources/po"
      POT_BUILD_DIR "${CMAKE_CURRENT_BINARY_DIR}/Resources/po"
      PO_BUILD_DIR "${CMAKE_CURRENT_BINARY_DIR}/Resources/po"
      MO_INSTALL_DIR "${KWWidgets_INSTALL_DATA_DIR}/locale"
      ADD_MO_TARGET_TO_ALL)
  ELSE(GETTEXT_FOUND)
    SET(msg "KWWidgets_USE_INTERNATIONALIZATION is ON but the gettext runtime library and tools were not found.\n\nMore information about internationalization support in KWWidgets can be found at http://public.kitware.com/Wiki/KWWidgets/i18n.\n\n${GETTEXT_INFO_MSG}")
    MESSAGE(FATAL_ERROR "${msg}")
  ENDIF(GETTEXT_FOUND)
ENDIF(KWWidgets_USE_INTERNATIONALIZATION)

# --------------------------------------------------------------------------
# Use [incr Tcl]

SET(default_val 0)
IF(DEFINED KWWidgets_USE_INCR_TCL_DEFAULT)
  SET(default_val ${KWWidgets_USE_INCR_TCL_DEFAULT})
ENDIF(DEFINED KWWidgets_USE_INCR_TCL_DEFAULT)
OPTION(KWWidgets_USE_INCR_TCL 
  "Enable [incr Tcl] support in KWWidgets." ${default_val})
MARK_AS_ADVANCED(KWWidgets_USE_INCR_TCL)
IF(KWWidgets_USE_INCR_TCL)
  FIND_PACKAGE(IncrTCL REQUIRED)
ENDIF(KWWidgets_USE_INCR_TCL)

# --------------------------------------------------------------------------
# Include dirs

INCLUDE_DIRECTORIES(
  ${KWWidgets_INCLUDE_PATH}
  ${VTK_INCLUDE_DIR}
  ${TKDND_INCLUDE_PATH}
  )

# A tricky one. Tcl/Tk 8.5.0 provides (for the first time) some of the
# "internal headers" we usually provide in VTK (tclPort.h, tclWinPort.h, etc).
# Alas, tclPort.h is buggy by default, as it tries to explicitly include
# "../win/tclWinPort.h" instead of "tclWinPort.h". Our VTK internal headers
# were fixed. The trick is therefore to include ours before ActiveState's,
# by using the BEFORE keyword below.

INCLUDE_DIRECTORIES(BEFORE ${TKTREECTRL_INCLUDE_PATH})

# --------------------------------------------------------------------------
# Wrapping

SUBDIRS(Wrapping)

SET(KWWidgets_SRCS ${KWWidgets_SRCS} ${KWWidgets_AUTOGENERATED_SRCS})

# --------------------------------------------------------------------------
# Wrap the classes in Tcl

INCLUDE("${KWWidgets_CMAKE_DIR}/KWWidgetsWrappingMacros.cmake")
SET(VTK_WRAP_HINTS ${KWWidgets_SOURCE_DIR}/hints)
KWWidgets_WRAP_TCL(
  KWWidgets
  KWWidgetsTCL_SRCS
  "${KWWidgets_SRCS}"
  "vtkKWWidgetsInitializeCommand"
  "${KWWidgets_MAJOR_VERSION}.${KWWidgets_MINOR_VERSION}")

SET(KWWidgets_TCL_PACKAGE_INDEX_DIR
  ${KWWidgets_BINARY_DIR}/Wrapping/Tcl)

# If needed, copy the Tcl/Tk support files required at run-time
# to initialize Tcl/Tk. This is used by the examples or larger
# projects that include KWWidgets directly in their source trees.

IF(TclTk_INSTALL_LIB_DIR)
  SET(KWWidgets_TclTk_INSTALL_LIB_DIR "${TclTk_INSTALL_LIB_DIR}")
ELSE(TclTk_INSTALL_LIB_DIR)
  SET(KWWidgets_TclTk_INSTALL_LIB_DIR "${KWWidgets_INSTALL_LIB_DIR}/TclTk/lib")
ENDIF(TclTk_INSTALL_LIB_DIR)

INCLUDE("${KWWidgets_CMAKE_DIR}/KWWidgetsTclTkMacros.cmake")
KWWidgets_COPY_TCL_TK_SUPPORT_FILES("${PROJECT_BINARY_DIR}/lib")
KWWidgets_INSTALL_TCL_TK_SUPPORT_FILES("${KWWidgets_TclTk_INSTALL_LIB_DIR}")
  INCR_TCL_GET_VERSION("INCR_TCL_MAJOR_VERSION" "INCR_TCL_MINOR_VERSION")

# --------------------------------------------------------------------------
# Wrap the classes in Python

IF(VTK_WRAP_PYTHON)

  SET(KWWidgetsPythonExtra_SRCS)
  IF(APPLE OR VTK_MAJOR_VERSION GREATER 4)
    SET(KWWidgetsPython_LIBS vtkCommonPythonD)
  ELSE(APPLE OR VTK_MAJOR_VERSION GREATER 4)
    SET(KWWidgetsPython_LIBS vtkCommonPython)
  ENDIF(APPLE OR VTK_MAJOR_VERSION GREATER 4)

  INCLUDE("${VTK_CMAKE_DIR}/vtkWrapPython.cmake")

  VTK_WRAP_PYTHON3(KWWidgetsPython KWWidgetsPython_SRCS
    "${KWWidgets_SRCS} ${KWWidgetsPythonExtra_SRCS}")

  SET(KWWidgets_PYTHON_MODULE_DIR
    ${KWWidgets_BINARY_DIR}/Wrapping/Python)

  IF(BORLAND)
    WRITE_FILE(${LIBRARY_OUTPUT_PATH}/KWWidgetsPython.def
      "EXPORTS\ninitKWWidgetsPython=_initKWWidgetsPython\n")
  ENDIF(BORLAND)

  ADD_LIBRARY(KWWidgetsPythonD ${KWWidgetsPython_SRCS}
              ${KWWidgetsPythonExtra_SRCS})
  TARGET_LINK_LIBRARIES(KWWidgetsPythonD KWWidgets ${KWWidgetsPython_LIBS})
  IF(KWWidgets_BUILD_VTK_WIDGETS AND 
      VTK_USE_RENDERING OR VTK_USE_RENDERING_ISSET)
    TARGET_LINK_LIBRARIES(KWWidgetsPythonD vtkRenderingPythonD)
  ENDIF(KWWidgets_BUILD_VTK_WIDGETS AND 
    VTK_USE_RENDERING OR VTK_USE_RENDERING_ISSET)

  IF(WIN32 OR APPLE)
    TARGET_LINK_LIBRARIES(KWWidgetsPythonD ${VTK_PYTHON_LIBRARIES})
  ENDIF(WIN32 OR APPLE)

  IF(NOT KWWidgets_INSTALL_NO_LIBRARIES)
    INSTALL_TARGETS(
      ${KWWidgets_INSTALL_LIB_DIR}
      RUNTIME_DIRECTORY ${KWWidgets_INSTALL_BIN_DIR}
      KWWidgetsPythonD)
  ENDIF(NOT KWWidgets_INSTALL_NO_LIBRARIES)

  ADD_LIBRARY(KWWidgetsPython MODULE
    Wrapping/Python/KWWidgetsPythonExtraInit.cxx)
  TARGET_LINK_LIBRARIES(KWWidgetsPython KWWidgetsPythonD)

  IF(WIN32 OR APPLE)
    TARGET_LINK_LIBRARIES(KWWidgetsPython ${VTK_PYTHON_LIBRARIES})
  ENDIF(WIN32 OR APPLE)
  IF(KWWidgets_BUILD_VTK_WIDGETS AND 
      VTK_USE_RENDERING OR VTK_USE_RENDERING_ISSET)
    # TARGET_LINK_LIBRARIES(KWWidgetsPython vtkRenderingPython)
  ENDIF(KWWidgets_BUILD_VTK_WIDGETS AND
    VTK_USE_RENDERING OR VTK_USE_RENDERING_ISSET)

  FIND_PROGRAM(PYTHON_EXECUTABLE
    NAMES python2.6 python2.5 python2.4 python2.3 python2.2 python
    PATHS
    [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\2.6\\InstallPath]
    [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\2.5\\InstallPath]
    [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\2.4\\InstallPath]
    [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\2.3\\InstallPath]
    [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\2.2\\InstallPath]
  )
  MARK_AS_ADVANCED(PYTHON_EXECUTABLE)

ENDIF(VTK_WRAP_PYTHON)

# --------------------------------------------------------------------------
# Create the instantiators

SET(VTK_USE_INSTANTIATOR_NEW 1)
VTK_MAKE_INSTANTIATOR3(KWWidgetsInstantiator 
                       KWWidgets_Instantiator_SRCS
                       "${KWWidgets_SRCS}"
                       KWWidgets_EXPORT
                       ${KWWidgets_BINARY_DIR} 
                       "vtkKWWidgets.h")

# --------------------------------------------------------------------------
# Build the library

ADD_LIBRARY(KWWidgets
  ${KWWidgetsTCL_SRCS}
  ${KWWidgets_SRCS}
  ${KWWidgets_Instantiator_SRCS}
  ${KWWidgets_UTILS_SRCS})

TARGET_LINK_LIBRARIES(KWWidgets vtkCommonTCL)
IF(KWWidgets_BUILD_VTK_WIDGETS)
  IF(VTK_WRAP_TCL)
    IF(VTK_USE_RENDERING OR VTK_USE_RENDERING_ISSET)
      TARGET_LINK_LIBRARIES(KWWidgets vtkRenderingTCL)
      TARGET_LINK_LIBRARIES(KWWidgets vtkHybridTCL)
      IF(VTK_MAJOR_VERSION GREATER 4)
        TARGET_LINK_LIBRARIES(KWWidgets vtkWidgetsTCL)
        TARGET_LINK_LIBRARIES(KWWidgets vtkVolumeRenderingTCL)
      ENDIF(VTK_MAJOR_VERSION GREATER 4)
    ENDIF(VTK_USE_RENDERING OR VTK_USE_RENDERING_ISSET)
    IF(VTK_USE_PARALLEL OR VTK_USE_PARALLEL_ISSET)
      TARGET_LINK_LIBRARIES(KWWidgets vtkParallelTCL)
    ENDIF(VTK_USE_PARALLEL OR VTK_USE_PARALLEL_ISSET)
  ELSE(VTK_WRAP_TCL)
    IF(VTK_USE_RENDERING OR VTK_USE_RENDERING_ISSET)
      TARGET_LINK_LIBRARIES(KWWidgets vtkRendering)
      TARGET_LINK_LIBRARIES(KWWidgets vtkHybrid)
      IF(VTK_MAJOR_VERSION GREATER 4)
        TARGET_LINK_LIBRARIES(KWWidgets vtkWidgets)
        TARGET_LINK_LIBRARIES(KWWidgets vtkVolumeRendering)
      ENDIF(VTK_MAJOR_VERSION GREATER 4)
    ENDIF(VTK_USE_RENDERING OR VTK_USE_RENDERING_ISSET)
    IF(VTK_USE_PARALLEL OR VTK_USE_PARALLEL_ISSET)
      TARGET_LINK_LIBRARIES(KWWidgets vtkParallel)
    ENDIF(VTK_USE_PARALLEL OR VTK_USE_PARALLEL_ISSET)
  ENDIF(VTK_WRAP_TCL)
ELSE(KWWidgets_BUILD_VTK_WIDGETS)
  IF(TK_LIBRARY_DEBUG)
    SET(KWWidgets_TK_LIBRARIES 
      optimized ${TK_LIBRARY} debug ${TK_LIBRARY_DEBUG})
  ELSE(TK_LIBRARY_DEBUG)
    SET(KWWidgets_TK_LIBRARIES ${TK_LIBRARY})
  ENDIF(TK_LIBRARY_DEBUG)
  TARGET_LINK_LIBRARIES(KWWidgets ${KWWidgets_TK_LIBRARIES})
ENDIF(KWWidgets_BUILD_VTK_WIDGETS)

TARGET_LINK_LIBRARIES(KWWidgets
  ${VTK_PNG_LIBRARIES}
  ${KWSYS_NAMESPACE}
  )

IF(WIN32)
  TARGET_LINK_LIBRARIES(KWWidgets comctl32 mpr)
  IF(HTML_HELP_INCLUDE_PATH AND HTML_HELP_LIBRARY)
    TARGET_LINK_LIBRARIES(KWWidgets ${HTML_HELP_LIBRARY} )
  ENDIF(HTML_HELP_INCLUDE_PATH AND HTML_HELP_LIBRARY)
ENDIF(WIN32)

IF(KWWidgets_USE_INTERNATIONALIZATION AND GETTEXT_RUNTIME_FOUND)
  TARGET_LINK_LIBRARIES(KWWidgets ${GETTEXT_LIBRARIES})
ENDIF(KWWidgets_USE_INTERNATIONALIZATION AND GETTEXT_RUNTIME_FOUND)

IF(KWWidgets_USE_INCR_TCL AND INCR_TCL_FOUND)
  TARGET_LINK_LIBRARIES(KWWidgets ${INCR_TCL_LIBRARY} ${INCR_TK_LIBRARY})
ENDIF(KWWidgets_USE_INCR_TCL AND INCR_TCL_FOUND)

IF(TKDND_LIBS)
  TARGET_LINK_LIBRARIES(KWWidgets ${TKDND_LIBS})
ENDIF(TKDND_LIBS)

IF(TKTREECTRL_LIBS)
  TARGET_LINK_LIBRARIES(KWWidgets ${TKTREECTRL_LIBS})
ENDIF(TKTREECTRL_LIBS)

IF(NOT KWWidgets_INSTALL_NO_LIBRARIES)
  INSTALL_TARGETS(
    ${KWWidgets_INSTALL_LIB_DIR}
    RUNTIME_DIRECTORY ${KWWidgets_INSTALL_BIN_DIR}
    ${KWWidgets_LIBRARIES})
ENDIF(NOT KWWidgets_INSTALL_NO_LIBRARIES)

# --------------------------------------------------------------------------
# Examples

SET(KWWidgets_EXAMPLES_DIR ${KWWidgets_SOURCE_DIR}/Examples)

OPTION(KWWidgets_BUILD_EXAMPLES "Build KWWidgets examples." ${BUILD_EXAMPLES})
MARK_AS_ADVANCED(KWWidgets_BUILD_EXAMPLES)

SET(KWWidgets_NEED_TO_BUILD_EXAMPLES ${KWWidgets_BUILD_EXAMPLES})

# --------------------------------------------------------------------------
# Testing (requires some of the examples)

INCLUDE(Dart)
MARK_AS_ADVANCED(BUILD_TESTING DART_ROOT TCL_TCLSH)

SET(default_val 1)
IF(DEFINED KWWidgets_BUILD_TESTING_DEFAULT)
  SET(default_val ${KWWidgets_BUILD_TESTING_DEFAULT})
ENDIF(DEFINED KWWidgets_BUILD_TESTING_DEFAULT)
OPTION(KWWidgets_BUILD_TESTING "Enable testing in KWWidgets." ${default_val})
MARK_AS_ADVANCED(KWWidgets_BUILD_TESTING)
IF(BUILD_TESTING AND KWWidgets_BUILD_TESTING)
  ENABLE_TESTING()
  #SET(BUILDNAME "${PROJECT_NAME}-${BUILDNAME}")
  SET(KWWidgets_NEED_TO_BUILD_EXAMPLES 1)
  OPTION(KWWidgets_TEST_OUT_OF_SOURCE "Perform existing tests as out-of-source tests. This checks that external projects can be built against a KWWidgets build tree." OFF)
  MARK_AS_ADVANCED(KWWidgets_TEST_OUT_OF_SOURCE)
  IF(KWWidgets_TEST_OUT_OF_SOURCE)
    OPTION(KWWidgets_TEST_INSTALLATION "Perform existing out-of-source tests against an installed KWWidgets library as well. This checks that external projects can be built against a KWWidgets installation tree. Make sure CMAKE_INSTALL_PREFIX is set and KWWidgets has been installed properly before running the tests." OFF)
    MARK_AS_ADVANCED(KWWidgets_TEST_INSTALLATION)
  ENDIF(KWWidgets_TEST_OUT_OF_SOURCE)
  SUBDIRS(Testing)
ENDIF(BUILD_TESTING AND KWWidgets_BUILD_TESTING)

# --------------------------------------------------------------------------
# Build the utilities

SUBDIRS(Utilities)

# --------------------------------------------------------------------------
# Install the headers

IF(NOT KWWidgets_INSTALL_NO_DEVELOPMENT)
  INSTALL_FILES(${KWWidgets_INSTALL_INCLUDE_DIR} .h ${KWWidgets_SRCS})
  INSTALL_FILES(${KWWidgets_INSTALL_INCLUDE_DIR} FILES vtkKWWidgets.h)
ENDIF(NOT KWWidgets_INSTALL_NO_DEVELOPMENT)

# --------------------------------------------------------------------------
# Resources

SET(KWWidgets_RESOURCES_DIR 
  ${KWWidgets_SOURCE_DIR}/Resources CACHE INTERNAL "")
SUBDIRS(Resources)

# --------------------------------------------------------------------------
# Configure the export configuration

SUBDIRS(CMake/ExportConfiguration)

# --------------------------------------------------------------------------
# Build the examples
# This need to be done *at the end*, so that the installation process
# goes as far as possible before trying to install the examples;
# examples would stop the install process if they failed to build (say, if a
# third-party lib like ITK or SOV was broken).

IF(KWWidgets_NEED_TO_BUILD_EXAMPLES)
  SUBDIRS(Examples)
ENDIF(KWWidgets_NEED_TO_BUILD_EXAMPLES)
