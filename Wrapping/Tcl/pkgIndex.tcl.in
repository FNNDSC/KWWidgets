# KWWidgets Tcl package configuration.

package ifneeded kwwidgetsinit {@KWWIDGETS_RES_MAJOR_VERSION@.@KWWIDGETS_RES_MINOR_VERSION@} {
  namespace eval ::kwwidgets::init {
    proc load_library_package {libName libPath {libPrefix {@KWWIDGETS_TCL_LIBNAME_PREFIX@}}} {
      set libExt [info sharedlibextension]
      set currentDirectory [pwd]
      set libFile [file join $libPath "$libPrefix$libName$libExt"]
      if {[catch "cd {$libPath}; load {$libFile}" errorMessage]} {
        puts $errorMessage
      }
      cd $currentDirectory
    }
    set version {@KWWIDGETS_RES_MAJOR_VERSION@.@KWWIDGETS_RES_MINOR_VERSION@}
  }
  package provide kwwidgetsinit {@KWWIDGETS_RES_MAJOR_VERSION@.@KWWIDGETS_RES_MINOR_VERSION@}
}

# Note that we @KWWIDGETS_TCL_LIBRARY_DIR@ will be set for install targets
# to some Tcl code that uses "info script". Be aware that "info script" does
# *not* return anything in the current pkgIndex.tcl context, because it
# is not sourced, per say. That is the reason why we need to source
# another file, inside each kits subdirectory. That source will in turn
# perform a "package require" that will call load_library_package successfully
# since "info script" will be defined.

# The is the C++ DLL itself
# Do not mess up with the quoting
package ifneeded KWWidgets {@KWWIDGETS_RES_MAJOR_VERSION@.@KWWIDGETS_RES_MINOR_VERSION@} "
    package require -exact kwwidgetsinit {@KWWIDGETS_RES_MAJOR_VERSION@.@KWWIDGETS_RES_MINOR_VERSION@}
    ::kwwidgets::init::load_library_package KWWidgets {@KWWIDGETS_TCL_LIBRARY_DIR@}
"

# The is the Tcl package itself
# Do not mess up with the quoting

package ifneeded kwwidgets {@KWWIDGETS_RES_MAJOR_VERSION@.@KWWIDGETS_RES_MINOR_VERSION@} "
    package require -exact kwwidgetsinit {@KWWIDGETS_RES_MAJOR_VERSION@.@KWWIDGETS_RES_MINOR_VERSION@}
    if {\[catch {source \[file join {@KWWIDGETS_TCL_SCRIPT_DIR@} kwwidgets kwwidgets.tcl\]} errorMessage\]} {
        puts \$errorMessage
    }
"
