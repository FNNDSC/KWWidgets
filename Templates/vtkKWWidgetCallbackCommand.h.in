/*=========================================================================

  Module:    $RCSfile: vtkKWWidgetCallbackCommand.h.in,v $

  Copyright (c) Kitware, Inc.
  All rights reserved.
  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notice for more information.

=========================================================================*/
// .NAME @WidgetType@CallbackCommand - a callback command
// .SECTION Description
// This vtkCommand subclass takes a @WidgetType@ as a target, and invoke its
// @WidgetType@::ProcessEvent() method when an event is triggered.
// .SECTION See Also
// vtkCommand @WidgetType@

#ifndef __@WidgetType@CallbackCommand_h
#define __@WidgetType@CallbackCommand_h

#include "vtkCommand.h"
#include "vtkKWWidgets.h" // Needed for export symbols directives

class @WidgetType@;

class KWWIDGETS_EXPORT @WidgetType@CallbackCommand : public vtkCommand
{
public:
  static @WidgetType@CallbackCommand *New() 
    { return new @WidgetType@CallbackCommand; };

  // Description:
  // Methods that gets executed when an event triggers this command
  virtual void Execute(vtkObject *caller, unsigned long event, void *callData);

  // Description:
  // Set/Get the object a ProcessEvent() method will be invoked on.
  virtual @WidgetType@* GetTarget();
  virtual void SetTarget(@WidgetType@ *target);
  
protected:
  @WidgetType@CallbackCommand();
  ~@WidgetType@CallbackCommand();
  
  @WidgetType@  *Target;

private:
  @WidgetType@CallbackCommand(const @WidgetType@CallbackCommand&); // Not implemented
  void operator=(const @WidgetType@CallbackCommand&); // Not implemented
};

#endif
