/*=========================================================================

  Module:    $RCSfile: vtkKWWidgetSet.h.in,v $

  Copyright (c) Kitware, Inc.
  All rights reserved.
  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notice for more information.

=========================================================================*/
// .NAME vtkKW@WidgetType@Set - a set of vtkKW@WidgetType@
// .SECTION Description
// A composite widget to conveniently store a set of vtkKW@WidgetType@. 
// Each vtkKW@WidgetType@ is created, removed or queried based
// on a unique ID provided by the user (ids are *not* handled by the class
// since it is likely that they will be defined as enum's or #define by
// the user for easier retrieval).
// Widgets are packed (gridded) in the order they were added.

#ifndef __vtkKW@WidgetType@Set_h
#define __vtkKW@WidgetType@Set_h

#include "vtkKWWidget.h"

class vtkKWApplication;
class vtkKW@WidgetType@;

//BTX
template<class DataType> class vtkLinkedList;
template<class DataType> class vtkLinkedListIterator;
//ETX

class VTK_EXPORT vtkKW@WidgetType@Set : public vtkKWWidget
{
public:
  static vtkKW@WidgetType@Set* New();
  vtkTypeRevisionMacro(vtkKW@WidgetType@Set,vtkKWWidget);
  void PrintSelf(ostream& os, vtkIndent indent);

  // Description:
  // Create the widget
  virtual void Create(vtkKWApplication *app, const char *args);

  // Description:
  // Add a vtkKW@WidgetType@ to the set.
  // The id has to be unique among the set.
  // Return a pointer to the vtkKW@WidgetType@, or NULL on error.
  virtual vtkKW@WidgetType@* AddWidget(int id);

  // Description:
  // Get a vtkKW@WidgetType@ from the set, given its unique id.
  // Return a pointer to the vtkKW@WidgetType@, or NULL on error.
  virtual vtkKW@WidgetType@* GetWidget(int id);

  // Description:
  // Get the number of vtkKW@WidgetType@ in the set, and retrieve
  // the n-th vtkKW@WidgetType@ (don't confuse the n-th rank with the id)
  // or the id of the n-th vtkKW@WidgetType@ (-1 if not found)
  virtual int GetNumberOfWidgets();
  virtual vtkKW@WidgetType@* GetNthWidget(int rank);
  virtual int GetNthWidgetId(int rank);

  // Description:
  // Check if a vtkKW@WidgetType@ is in the set, given its unique id.
  // Return 1 if exists, 0 otherwise.
  virtual int HasWidget(int id);

  // Description:
  // Hide/show a vtkKW@WidgetType@, given its unique id.
  // Get the number of visible vtkKW@WidgetType@ in the set.
  virtual void HideWidget(int id);
  virtual void ShowWidget(int id);
  virtual int GetWidgetVisibility(int id);
  virtual void SetWidgetVisibility(int id, int flag);
  virtual int GetNumberOfVisibleWidgets();

  // Description:
  // Delete all vtkKW@WidgetType@ widgets
  virtual void DeleteAllWidgets();

  // Description:
  // Set the packing direction to be horizontal (default is vertical).
  virtual void SetPackHorizontally(int);
  vtkBooleanMacro(PackHorizontally, int);
  vtkGetMacro(PackHorizontally, int);

  // Description:
  // Set the maximum number of widgets that will be packed in the packing
  // direction (i.e. horizontally or vertically).
  // For example, if set to 3 and the packing direction is horizontal, 
  // the layout ends up as 3 columns of widgets.
  // The default is 0, i.e. all widgets are packed along the same direction. 
  virtual void SetMaximumNumberOfWidgetsInPackingDirection(int);
  vtkGetMacro(MaximumNumberOfWidgetsInPackingDirection, int);

  // Description:
  // Set the widgets padding.
  virtual void SetPadding(int x, int y);

  // Description:
  // Set the layout to allow the widgets to expand automatically 
  virtual void SetExpandWidgets(int);
  vtkBooleanMacro(ExpandWidgets, int);
  vtkGetMacro(ExpandWidgets, int);

  // Description:
  // Update the "enable" state of the object and its internal parts.
  // Depending on different Ivars (this->Enabled, the application's 
  // Limited Edition Mode, etc.), the "enable" state of the object is updated
  // and propagated to its internal parts/subwidgets. This will, for example,
  // enable/disable parts of the widget UI, enable/disable the visibility
  // of 3D widgets, etc.
  virtual void UpdateEnableState();

protected:
  vtkKW@WidgetType@Set();
  ~vtkKW@WidgetType@Set();

  int PackHorizontally;
  int MaximumNumberOfWidgetsInPackingDirection;
  int PadX;
  int PadY;
  int ExpandWidgets;

  //BTX

  // A WidgetSlot associates a vtkKW@WidgetType@ to a unique Id
  // I don't want to use a map between those two, for the following reasons:
  // a), we might need more information in the future, b) a map 
  // Register/Unregister pointers if they are pointers to VTK objects.
 
  class WidgetSlot
  {
  public:
    int Id;
    vtkKW@WidgetType@ *Widget;
  };

  typedef vtkLinkedList<WidgetSlot*> WidgetsContainer;
  typedef vtkLinkedListIterator<WidgetSlot*> WidgetsContainerIterator;
  WidgetsContainer *Widgets;

  // Helper methods

  virtual WidgetSlot* GetWidgetSlot(int id);
  virtual WidgetSlot* GetNthWidgetSlot(int rank);

  //ETX

  virtual void Pack();

private:
  vtkKW@WidgetType@Set(const vtkKW@WidgetType@Set&); // Not implemented
  void operator=(const vtkKW@WidgetType@Set&); // Not implemented
};

#endif
